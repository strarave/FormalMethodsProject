<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
    entities: 
        BOT -&gt; can either move or lift (must have "lifting" flag) and it can perform all the task-related actions
        GRID (integer matrix), 
        POD,
        HUMA ONLY ONE HUMAN IN THE SYSTEM. s/he can only pick_up the pod
        TASK -&gt; claim, pod_fetch, pod_deliver, human_pick_up, robot_return 
        QUEUE -&gt; composed of tasks queue (FIFO list) and list of available bots (to be chosen randomly)
    
    Synchronize tokens:
        BOT - TASK : claim!, end!
        BOT - POD : lift!, pose!
        BOT - HUMAN : pick_up?, release?


    miscellanueous notes:
        delivery point and entry point are known a priori
        

*/

// Modelling the grid:
/* 
    The grid is n x m matrix of integers and has as elements a number in [0,2]
    0: the spot is free
    1: the spot is occupied by a bot (it does not matter if it has a pod or not)
    2: the spot is occupied by a pod and the pod is free (so no bot under the pod)
    3: the spot is occupied by a pod and the pod is claimed by a task
    4: the spot is the entry point
    5: the spot is the delivery point
*/

const int n = 10;
const int m = 10;
const int entryPoint[2] = {9, 9};
const int deliveryPoint[2] = {0, 9};
int[0,5] grid[n][m];

//First scheme of the grid

void gridInitialization () {
    int i,j;
    for (i = 0; i &lt; n; i++){
        for (j = 0; j &lt; m; j++) {
            if (i == entryPoint[0] &amp;&amp; j == entryPoint[1]) {grid[i][j] = 4;}
            else if (i == deliveryPoint[0] &amp;&amp; j == deliveryPoint[1]) {grid[i][j] = 5;}
            else if (i % 2 == 0 &amp;&amp; j &lt; 6) {grid[i][j] = 2;}
            else {grid[i][j] = 0;}
        }    
    }

}</declaration>
	<template>
		<name x="5" y="5">POD</name>
		<declaration>// Place local declarations here.

/* The starting command is the initialization of the grid to define the postion of the pods */</declaration>
		<location id="id0" x="0" y="0">
			<committed/>
		</location>
		<location id="id1" x="-221" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-161" y="8">gridInitialization()</label>
		</transition>
	</template>
	<template>
		<name>BOT</name>
		<location id="id2" x="0" y="0">
		</location>
		<init ref="id2"/>
	</template>
	<template>
		<name>QUEUE</name>
		<location id="id3" x="0" y="0">
		</location>
		<init ref="id3"/>
	</template>
	<template>
		<name>TASK</name>
		<parameter>int T</parameter>
		<declaration>/*
    This template should be used to define the evolution of a single task
    When the a new task is added the template choses the corresponding pod randomly among the available ones
    First implementation: a new task arrives every T seconds (constant value)
    Future implementation: T is a sample of a normal distribution
*/

clock timer;
int avPods[n*m][2]; /*The amatrix is oversized because it considers there could be a pod for every spot of the grid. Consider adding a parameter for the total number of pods */
int avPods_quantity = 0; /*Number of available pods*/
int chosenPod[2];

void init_avPods () {
    int i;
    for (i = 0; i &lt; n*m; i++) {
        avPods[i][0] = -1;
        avPods[i][1] = -1;
    }
}

void checkAv () { /*Function to check which pods are available*/
    int i,j;
    avPods_quantity = 0;
    for (i = 0; i &lt; n; i++) {
        for (j = 0; j &lt; m; j++) {
            if (grid[i][j] == 2) {
                avPods[avPods_quantity][0] = i;
                avPods[avPods_quantity][1] = j;
                avPods_quantity ++;
            }
        }
    }
}

void choosePod(int i) {
    int chosen =  i % avPods_quantity;
    chosenPod = avPods[chosen];
}</declaration>
		<location id="id4" x="-178" y="-42">
			<name x="-153" y="-59">idle</name>
			<label kind="invariant" x="-153" y="-42">timer &lt;= T</label>
		</location>
		<location id="id5" x="102" y="-42">
			<name x="127" y="-51">addingTask</name>
			<committed/>
		</location>
		<location id="id6" x="-408" y="-42">
			<name x="-418" y="-76">startingTask</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="assignment" x="-382" y="-42">timer = 0, init_avPods()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="select" x="-127" y="-170">i : int[0, 1000]</label>
			<label kind="assignment" x="-127" y="-153">choosePod(i), init_avPods(),
timer = 0</label>
			<nail x="102" y="-110"/>
			<nail x="-178" y="-110"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-85" y="0">timer &gt;= T</label>
			<label kind="assignment" x="-85" y="25">checkAv()</label>
			<nail x="-178" y="25"/>
			<nail x="102" y="25"/>
		</transition>
	</template>
	<template>
		<name>HUMAN</name>
		<location id="id7" x="0" y="0">
		</location>
		<init ref="id7"/>
	</template>
	<system>t = TASK(10);
p = POD();
system p, t;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
