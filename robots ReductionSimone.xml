<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
    entities: 
        BOT -&gt; can either move or lift (must have "lifting" flag) and it can perform all the task-related actions
        GRID (integer matrix), 
        POD,
        HUMA ONLY ONE HUMAN IN THE SYSTEM. s/he can only pick_up the pod
        TASK -&gt; claim, pod_fetch, pod_deliver, human_pick_up, robot_return 
        QUEUE -&gt; composed of tasks queue (FIFO list) and list of available bots (to be chosen randomly)
    
    Synchronize tokens:
        BOT - QUEUE : avaiableTask?, claim!, end!
        TASK - QUEUE : newTask!
        BOT - POD : lift!, pose!
        BOT - HUMAN : pick_up?, release?


    miscellanueous notes:
        delivery point and entry point are known a priori

        The temporary variable tmpCommunicatePodToBot is used to communicate the chosen pod to the bot
        The temporary variable tmpPodChosenByTask is used to receive the pod chosen by the task template and append it to queueList
        

*/
// Modelling the grid:
/* 
    The grid is n x m matrix of integers and has as elements a number in [0,7]
    0: the spot is free
    1: the spot is occupied by a bot with no pod over it
    2: the spot is occupied by a pod and the pod is free (so no bot under the pod)
    3: the spot is occupied by a pod and the pod is claimed by a task (so no bot under the pod)
    4: the spot is the entry point
    5: the spot is the delivery point
    6: the spot is occupied by a bot and a free pod
    7: the spot is occupied by a bot and a claimed pod
*/

const int n = 10;
const int m = 10;
const int entryPoint[2] = {9, 9};
const int deliveryPoint[2] = {0, 9};
int[0,7] grid[n][m];


//First scheme of the grid

void gridInitialization () {
    int i,j;
    for (i = 0; i &lt; n; i++){
        for (j = 0; j &lt; m; j++) {
            if (i == entryPoint[0] &amp;&amp; j == entryPoint[1]) {grid[i][j] = 4;}
            else if (i == deliveryPoint[0] &amp;&amp; j == deliveryPoint[1]) {grid[i][j] = 5;}
            else if (i % 2 == 0 &amp;&amp; j &lt; 6) {grid[i][j] = 2;}
            else {grid[i][j] = 0;}
        }    
    }

}

// Bots
const int K = 2;
const int nBot = 2;
typedef int[0, nBot - 1] bot_t;
urgent chan claim[bot_t];
int tmpCommunicatePodToBot[2];

// Queue
const int maxT = 1;

// Comunication Task - Queue
const int TTask = 100;
const int maxTask = 4;
chan newTask;
meta int tmpPodChosenByTask[2];

// Human
const int H = 40;
chan pickUp;
chan podDelivered;

//POD
meta int tmpCommunicateBotToPod[2];</declaration>
	<template>
		<name>BOT</name>
		<parameter>bot_t ID</parameter>
		<declaration>bool isLifting;
bool isReturning;
clock timer;
int[-1, 1] moveDown;
int[-1, 1] moveRight;
int podPosition[2];
int botPosition[2] = entryPoint;
int positionWithoutBot = 0;
int preGridValue = 4; /* Variable that stores the previous state of the grid */
int tgt[2];
int selectedCell = 7;


/*
   direction is an integer starting from 0 to 3 that represents the cardinal points around the 
   botPosition. 0 is north, clockwise order
   the grid:

    The grid is n x m matrix of integers and has as elements a number in [0,7]
    0: the spot is free
    1: the spot is occupied by a bot with no pod over it
    2: the spot is occupied by a pod and the pod is free (so no bot under the pod)
    3: the spot is occupied by a pod and the pod is claimed by a task (so no bot under the pod)
    4: the spot is the entry point
    5: the spot is the delivery point
    6: the spot is occupied by a bot and a free pod
    7: the spot is occupied by a bot and a claimed pod
*/
int checkPositions(int direction){
    selectedCell = 7; // default condition == the most strict
    if(direction == 0 &amp;&amp; botPosition[0] &gt; 0){
        selectedCell = grid[botPosition[0] - 1][botPosition[1]];
    }
    else if (direction == 1 &amp;&amp; botPosition[1] &lt; 9){
        selectedCell = grid[botPosition[0]][botPosition[1] + 1];
    }
    else if (direction == 2 &amp;&amp; botPosition[0] &lt; 9){
        selectedCell = grid[botPosition[0] + 1][botPosition[1]];
    }
    else if (direction == 3 &amp;&amp; botPosition[1] &gt; 0){
        selectedCell = grid[botPosition[0]][botPosition[1] - 1];
    }

    if(selectedCell == 0 || (selectedCell == 2 &amp;&amp; !isLifting) || (selectedCell == 3 &amp;&amp; !isLifting) || (selectedCell == 4 &amp;&amp; !isLifting) || selectedCell == 5) return 1;
    else return 0;
}

void computeMove(int destination[2]){
    moveRight = 0;
    moveDown = 0;

    // L-shaped trajectory (up/down then left/right)
    if((destination[0] - botPosition[0]) &gt; 0){
        moveDown = checkPositions(2);
    }
    else if((destination[0] - botPosition[0]) &lt; 0){
        moveDown = -checkPositions(0);
    }
    if((destination[1] - botPosition[1]) &gt; 0){
        moveRight = checkPositions(1);
    }
    else if((destination[1] - botPosition[1]) &lt; 0){
        moveRight = -checkPositions(3);
    }
    
}

// this method checks if the row I'm trying to enter is free of bots returning pods
bool rowClear(int currentRow){
    int scanIndex;
    int rowToCheck;
    if(currentRow != 0){
        rowToCheck = currentRow--; // assumption: the delivery point is always "on top" of the grid representation
        for(scanIndex = 0; scanIndex &lt; m; scanIndex++)
            if(grid[rowToCheck][scanIndex] == 7) return false;
    }
    return true;
}

/*
    this function moves the robot by updating his position on the grid
*/
void move(){
    if(moveDown == 0 &amp;&amp; moveRight == 0){
        return;
    }
    else{
        
        /* Restore the previous value of the grid */
        if (grid[botPosition[0]][botPosition[1]] == 1 || (isLifting &amp;&amp; preGridValue != 3)) {
            grid[botPosition[0]][botPosition[1]] = preGridValue;
        }
        else if (grid[botPosition[0]][botPosition[1]] == 6) {
            grid[botPosition[0]][botPosition[1]] = 2;
        }
        else if (grid[botPosition[0]][botPosition[1]] == 7) {
            if (botPosition[0] == deliveryPoint[0] &amp;&amp; botPosition[1] == deliveryPoint[1])
                grid[botPosition[0]][botPosition[1]] = 5;
            else if (preGridValue == 3) {
                grid[botPosition[0]][botPosition[1]] = 0;
            }
            else {
                grid[botPosition[0]][botPosition[1]] = 3;
            }
        }
        
        if(moveDown != 0)  botPosition[0] += moveDown;
        else if (moveRight != 0) botPosition[1] += moveRight;
        
    }

    // update the grid
    preGridValue = grid[botPosition[0]][botPosition[1]];
    
    if (preGridValue == 2) {
        grid[botPosition[0]][botPosition[1]] = 6;
    }
    else if (preGridValue == 3 || isLifting) {
        grid[botPosition[0]][botPosition[1]] = 7;
    }
    else if (preGridValue != 4) {
        grid[botPosition[0]][botPosition[1]] = 1;
    }
    else {
        grid[botPosition[0]][botPosition[1]] = 4;
    }
}

bool checkLine(int line, int limit0, int limit1) {
    int cellCheck;
    bool free = true;
    if (limit0 &gt; limit1) {
        limit0 += limit0;
        limit0 = limit1 - limit0;
        limit1 -= limit0;
    }
    for (cellCheck = limit0; cellCheck &lt;= limit1; cellCheck++) {
        if (grid[line][cellCheck] != 0) {
            free = false;
        }
    }
    return free;
}

void setPodPosition(){
    podPosition[0] = tmpCommunicatePodToBot[0];
    podPosition[1] = tmpCommunicatePodToBot[1];
    tmpCommunicateBotToPod[0] = podPosition[0];
    tmpCommunicateBotToPod[1] = podPosition[1];
}

void moveToPod(){
    computeMove(podPosition);
    move();
}

void moveToDelivery(){
    // same as returnPod, the free space under the delivery point must be the target
    bool checked = true;
    if (botPosition[0] == 0 &amp;&amp; botPosition[0] == podPosition[0] &amp;&amp; botPosition[1] == podPosition[1]) {checked = checkLine(botPosition[0]+1,botPosition[1],9);}
    else if(botPosition[0] == podPosition[0] &amp;&amp; botPosition[1] == podPosition[1]) {checked = checkLine(botPosition[0]-1,botPosition[1],9);}
    if ( (botPosition[0] == podPosition[0] &amp;&amp; botPosition[1] == podPosition[1]) &amp;&amp; !checked){
    /* Do Nothing */
    }
    else if( (botPosition[0] == deliveryPoint[0] + 1 &amp;&amp; botPosition[1] == deliveryPoint[1])){
        computeMove(deliveryPoint);    
        move();
    }
    else{
        tgt[0] = deliveryPoint[0] + 1;
        tgt[1] = deliveryPoint[1];
        computeMove(tgt);
        move();
    }
}

void moveTowardsStartPoint(){
    computeMove(entryPoint);
    move();
}

void returnPod(){
    // pod should be returned taking into account the row of pods
    // if the destination is in my reachable squares, I can go there
    if( (botPosition[0] == podPosition[0] + 1 &amp;&amp; botPosition[1] == podPosition[1])){
        computeMove(podPosition);
    }
    // if not, I need to reach the row first (the free row BELOW the pods row) and then the spot just before the pod's one
    else{
        int tmpPodPosition[2];
        tmpPodPosition[0] = podPosition[0] + 1;
        tmpPodPosition[1] = podPosition[1];
        computeMove(tmpPodPosition);
    }
    move();
}

bool checkArrived(int destination[2]) {
    if (botPosition[0] == destination[0] &amp;&amp; 
        botPosition[1] == destination[1] &amp;&amp; // coordinate check
        (rowClear(botPosition[0]) || // upper row free
        isReturning || // either returning 
        !isLifting)) // or not delivering bot (this condition is verified just before entering a row) 
            return true;
    else return false;
}</declaration>
		<location id="id0" x="-255" y="-425">
			<name x="-265" y="-459">idle</name>
		</location>
		<location id="id1" x="433" y="17">
			<name x="450" y="-85">podReached</name>
			<label kind="invariant" x="450" y="-17">timer &lt;= K</label>
			<label kind="comments" x="450" y="-59">Pod reached and lifted
Going to delivery point</label>
		</location>
		<location id="id2" x="110" y="17">
			<name x="59" y="34">podDelivering</name>
			<label kind="comments" x="59" y="59">Pod delivered
Waiting for human to complete task</label>
		</location>
		<location id="id3" x="433" y="-425">
			<name x="450" y="-416">taskClaimed</name>
			<label kind="invariant" x="450" y="-357">timer &lt;= K</label>
			<label kind="comments" x="450" y="-391">Task claimed
Going to pod position</label>
		</location>
		<location id="id4" x="-255" y="17">
			<name x="-348" y="-17">podReturn</name>
			<label kind="invariant" x="-348" y="0">timer &lt;= K</label>
			<label kind="comments" x="-442" y="-42">Returning to pod position</label>
		</location>
		<location id="id5" x="-255" y="-204">
			<name x="-238" y="-213">returnToStartPoint</name>
			<label kind="invariant" x="-238" y="-195">timer &lt;= K</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="68" y="-510">claim[ID]!</label>
			<label kind="assignment" x="68" y="-493">setPodPosition(),
timer = 0,
isReturning = false</label>
			<nail x="93" y="-425"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-629" y="-229">!checkArrived(entryPoint) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="-561" y="-204">moveTowardsStartPoint(),
timer = 0</label>
			<nail x="-382" y="-77"/>
			<nail x="-382" y="-315"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="guard" x="-246" y="-340">checkArrived(entryPoint) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="-238" y="-323">timer = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-408" y="195">!checkArrived(podPosition) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="-382" y="212">returnPod(),
timer = 0</label>
			<nail x="-255" y="178"/>
			<nail x="-374" y="178"/>
			<nail x="-374" y="17"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-306" y="-93">checkArrived(podPosition) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="-246" y="-76">isLifting = false,
isReturning = false,
grid[botPosition[0]][botPosition[1]] = 6</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-102" y="17">pickUp?</label>
			<label kind="assignment" x="-102" y="34">timer = 0,
isReturning = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="85" y="-34">checkArrived(deliveryPoint) &amp;&amp; timer &gt;= K</label>
			<label kind="synchronisation" x="196" y="-17">podDelivered!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="629" y="34">!checkArrived(deliveryPoint) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="629" y="51">moveToDelivery(),
timer = 0</label>
			<nail x="433" y="153"/>
			<nail x="620" y="153"/>
			<nail x="620" y="17"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="442" y="-238">checkArrived(podPosition) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="442" y="-221">isLifting = true</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="612" y="-527">!checkArrived(podPosition) &amp;&amp; timer &gt;= K</label>
			<label kind="assignment" x="612" y="-510">moveToPod(),
timer = 0</label>
			<nail x="433" y="-518"/>
			<nail x="603" y="-518"/>
			<nail x="603" y="-425"/>
		</transition>
	</template>
	<template>
		<name>QUEUE</name>
		<declaration>/*
    When a new task is available, the template TASK send a newTask! and the queue collect the new task
    When a bot is idle, it sends a claim! to get the next task in the queue
    If a the queue receives a newTask and it is already full, it reaches a deadlock state

    The temporary variable tmpCommunicatePodToBot is used to communicate the chosen pod to the bot
    The temporary variable tmpPodChosenByTask is used to receive the pod chosen by the task template and append it to queueList
*/

int nTask = 0;
int queueList[maxT][2];


void initQueue(){
    int j;
    for (j = 0; j&lt;maxT; j++){queueList[j][0] = -1; queueList[j][1] = -1;}
}

void append(int k[2]) {
    int j;
    bool done = false;
    for (j = 0; j&lt;maxT; j++) {
        if (queueList[j][0] == -1 &amp;&amp; !done){
            queueList[j] = k;
            done = true;
        }
    }
}

void pop() {
    int j;
    for (j = 0; j&lt;maxT; j++) {
        if (j &lt; maxT - 1) {queueList[j] = queueList[j+1];}
        else {queueList[j][0] = -1; queueList[j][1] = -1;}
    }
}</declaration>
		<location id="id6" x="-425" y="8">
			<name x="-435" y="-26">start</name>
			<committed/>
		</location>
		<location id="id7" x="-161" y="8">
			<name x="-229" y="17">Working</name>
		</location>
		<location id="id8" x="229" y="8">
			<name x="219" y="-26">LostAPacket</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-153" y="-187">i : int[0, nBot-1]</label>
			<label kind="guard" x="-153" y="-170">nTask &gt; 0</label>
			<label kind="synchronisation" x="-153" y="-153">claim[i]?</label>
			<label kind="assignment" x="-153" y="-136">pop() ,nTask--,
tmpCommunicatePodToBot = queueList[0]</label>
			<nail x="-161" y="-94"/>
			<nail x="42" y="-94"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="59" y="24">nTask &gt;= maxT</label>
			<label kind="synchronisation" x="59" y="8">newTask?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-153" y="161">nTask &lt; maxT</label>
			<label kind="synchronisation" x="-153" y="110">newTask?</label>
			<label kind="assignment" x="-153" y="127">append(tmpPodChosenByTask), 
nTask++, tmpCommunicatePodToBot = queueList[0]</label>
			<nail x="-161" y="110"/>
			<nail x="42" y="110"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="assignment" x="-357" y="8">initQueue(),
gridInitialization()</label>
		</transition>
	</template>
	<template>
		<name>TASK</name>
		<parameter>int T, int maxTask</parameter>
		<declaration>/*
    This template should be used to define the evolution of a single task
    When the a new task is added the template choses the corresponding pod randomly among the available ones
    First implementation: a new task arrives every T seconds (constant value)
    Future implementation: T is a sample of a normal distribution

    IMPORTANT: What to do if no pod is available?
    SOLUTION: If no pod is available Task returns to idle without doing anything. After another T-second interval it will try to send another request
*/

clock timer;
int avPods[n*m][2]; /*The amatrix is oversized because it considers there could be a pod for every spot of the grid. Consider adding a parameter for the total number of pods */
int avPods_quantity = 0; /*Number of available pods*/
int chosenPod[2];

void init_avPods () {
    int i;
    for (i = 0; i &lt; n*m; i++) {
        avPods[i][0] = -1;
        avPods[i][1] = -1;
    }
}

void checkAv () { /*Function to check which pods are available*/
    int i,j;
    for (i = 0; i &lt; n; i++) {
        for (j = 0; j &lt; m; j++) {
            if (grid[i][j] == 2 || grid[i][j] == 6) {
                avPods[avPods_quantity][0] = i;
                avPods[avPods_quantity][1] = j;
                avPods_quantity ++;
            }
        }
    }
}

void choosePod(int i) {
    int chosen =  i % avPods_quantity;
    chosenPod = avPods[chosen];
}</declaration>
		<location id="id9" x="-178" y="-42">
			<name x="-153" y="-42">idle</name>
			<label kind="invariant" x="-161" y="-25">timer &lt;= T</label>
		</location>
		<location id="id10" x="-578" y="-42">
			<name x="-588" y="-76">startingTask</name>
			<committed/>
		</location>
		<location id="id11" x="93" y="-382">
			<name x="110" y="-408">addingTask</name>
			<committed/>
		</location>
		<location id="id12" x="-119" y="119">
			<name x="-129" y="85">finished</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-331" y="127">maxTask == 0</label>
			<label kind="assignment" x="-331" y="144">timer = 0</label>
			<nail x="-323" y="25"/>
			<nail x="-323" y="119"/>
			<nail x="-229" y="119"/>
			<nail x="-187" y="119"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="guard" x="-229" y="-501">chosenPod[0] != -1</label>
			<label kind="synchronisation" x="-229" y="-518">newTask!</label>
			<label kind="assignment" x="-229" y="-484">init_avPods(), timer = 0,
tmpPodChosenByTask = chosenPod,
grid[chosenPod[0]][chosenPod[1]]++,
avPods_quantity = 0, 
chosenPod[0] = 0, chosenPod[1] = 0</label>
			<nail x="-178" y="-382"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="guard" x="0" y="-246">chosenPod[0] == -1</label>
			<label kind="assignment" x="-25" y="-229">init_avPods(), timer = 0,
avPods_quantity = 0, 
chosenPod[0] = 0, chosenPod[1] = 0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="assignment" x="-501" y="-42">timer = 0, init_avPods()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="select" x="76" y="-34">i: int[0,31]</label>
			<label kind="guard" x="76" y="-17">timer &gt;= T &amp;&amp;
maxTask &gt; 0</label>
			<label kind="assignment" x="76" y="25">checkAv(),
maxTask--,
choosePod(i)</label>
			<nail x="-178" y="25"/>
			<nail x="323" y="25"/>
			<nail x="323" y="-382"/>
		</transition>
	</template>
	<template>
		<name>HUMAN</name>
		<parameter>int H</parameter>
		<declaration>/* 
    The human operator waits for a pod that communicates that a pod has been delivered.
    After receiveing the message he stays in busy for H seconds and after that communicates to the robot it is free to go
*/

clock timer;
/* Setting timer equal to  when it is not used should speed up the simulation*/</declaration>
		<location id="id13" x="-323" y="-34">
			<name x="-374" y="-43">free</name>
		</location>
		<location id="id14" x="0" y="-34">
			<name x="17" y="-51">busy</name>
			<label kind="invariant" x="17" y="-34">timer &lt;= H</label>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-212" y="-170">timer &gt;= H</label>
			<label kind="synchronisation" x="-212" y="-153">pickUp!</label>
			<label kind="assignment" x="-212" y="-119">timer = 0</label>
			<nail x="0" y="-119"/>
			<nail x="-323" y="-119"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-229" y="68">podDelivered?</label>
			<label kind="assignment" x="-212" y="51">timer = 0</label>
			<nail x="-323" y="51"/>
			<nail x="0" y="51"/>
		</transition>
	</template>
	<system>queue = QUEUE();
task = TASK(TTask, maxTask); // tasks generator
human  = HUMAN(H);
system queue, task, human, BOT;</system>
	<queries>
		<query>
			<formula>A[] not queue.LostAPacket</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
